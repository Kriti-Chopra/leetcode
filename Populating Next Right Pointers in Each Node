/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if(root==NULL) return NULL;
        queue<Node*> level;
        level.push(root);
        
        int i=0;
        while(!level.empty() && level.front()!=NULL){
            
            //now pop the top ele
            //then push its left and right child
            //2^n times only
            int run=(1<<i);
            cout<<i<<" "<<run<<endl;
            while(run>1){
                Node* cur=level.front();
                level.pop();
                level.push(cur->left);
                level.push(cur->right);
                cur->next=level.front();
                
                --run;
            }
            Node* cur=level.front();
            level.pop();
            level.push(cur->left);
            level.push(cur->right);
            cur->next=NULL;
            
            ++i;
        }
        
        return root;
    }
};
